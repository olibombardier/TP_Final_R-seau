<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExempleMVVM</name>
    </assembly>
    <members>
        <member name="T:ExempleMVVM.Modeles.Conversation">
            <summary>
            Permet de gérer une conversation. Une conversation peut être la conversation globale (avec
            tous les utilisateurs) ou une conversation privée (avec un utilisateur seulement).
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.connecte">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.Connecte"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.estGlobale">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.EstGlobale"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.iv">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.IV"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.key">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.Key"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.lignes">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.Lignes"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.socket">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.Socket"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Conversation.utilisateur">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Conversation.Utilisateur"/>
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.Connecte">
            <summary>
            Obtient ou définit une valeur indiquant si la connexion est établie avec l'utilisateur
            distant (pour les conversations privée) (à vrai si conversation globale)
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.EstGlobale">
            <summary>
            Obtient ou définit une valeur indiquant si la conversation est globale, c'est-à-dire, à
            tous les usagers du système
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.EstPrivee">
            <summary>
            Obtient une valeur indiquant si la conversation est privée, c'est-à-dire, liée à un seul utilisateur.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.IV">
            <summary>
            Obtient ou définit la variable IV pour le cryptage en AES 128 pour les conversations privées
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.Key">
            <summary>
            Obtient ou définit la variable Key pour le cryptage en AES 128 pour les conversations privées
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.Lignes">
            <summary>
            Obtient ou définit la liste des lignes de la conversation contenant le nom d'utilisateur,
            l'adresse IP et le message.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.Socket">
            <summary>
            Obtient ou définit le Socket associé à la conversation
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Conversation.Utilisateur">
            <summary>
            Obtient ou définit l'utilisateur auquel la conversation est liée. Utile pour une
            conversation privée. Dans le cas d'une conversation globale, on peut mettre un
            utilisateur bidon pour avoir le nom de l'utilisateur de la conversation.
            </summary>
        </member>
        <member name="T:ExempleMVVM.Modeles.LigneConversation">
            <summary>
            Spécifie une ligne dans une conversation. Il y a une ligne par message envoyé ou reçu.
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.LigneConversation.message">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.LigneConversation.Message"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.LigneConversation.utilisateur">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.LigneConversation.Utilisateur"/>
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.LigneConversation.Message">
            <summary>
            Obtient ou définit le message que l'utilisateur a envoyé
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.LigneConversation.Utilisateur">
            <summary>
            Obtient ou définit l'utilisateur qui a envoyé le message.
            </summary>
        </member>
        <member name="T:ExempleMVVM.Modeles.ModelBase">
            <summary>
            Classe mère des modèles du système.
            </summary>
        </member>
        <member name="E:ExempleMVVM.Modeles.ModelBase.PropertyChanged">
            <summary>
            Évènement permettant d'avertir les observateurs du changement d'une propriété
            </summary>
        </member>
        <member name="M:ExempleMVVM.Modeles.ModelBase.NotifyPropertyChanged(System.String)">
            <summary>
            Méthode permettant d'appeler PropertyChanged sans avoir à spécifier ses paramètres
            </summary>
            <param name="nomPropriete">Nom de la propriété qui a changée</param>
        </member>
        <member name="T:ExempleMVVM.Modeles.Profil">
            <summary>
            Profil de l'utilisateur local.
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Profil.connecte">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Profil.Connecte"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Profil.connexionEnCours">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Profil.ConnexionEnCours"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Profil.conversations">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Profil.Conversations"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Profil.nom">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Profil.Nom"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Profil.utilisateurLocal">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Profil.UtilisateurLocal"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Profil.utilisateursConnectes">
            <summary>
            Variable privée de la propriété <see cref="!:UtilisateurConnectes"/>
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Profil.Connecte">
            <summary>
            Obtient ou définit une valeur indiquant si l'utilisateur local a réussi à se connecter.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Profil.ConnexionEnCours">
            <summary>
            Obtient ou définit une valeur indiquant si le processus de connexion est en cours
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Profil.Conversations">
            <summary>
            Obtient ou définit la liste des conversations en cours. Une conversation globale existe
            par défaut pour parler à tous les utilisateurs connectés. Les autres conversations seront
            de type privé.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Profil.Nom">
            <summary>
            Obtient ou définit le nom de l'utilisateur local.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Profil.UtilisateurLocal">
            <summary>
            Obtient ou définit l'objet de type Utilisateur représentant l'utilisateur local. Utile
            pour ajouter une ligne dans une conversation envoyé par l'utilisateur local.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Profil.UtilisateursConnectes">
            <summary>
            Obtient ou définit la liste des utilisateurs connectées qui utilise présentement cette
            application sur le réseau.
            </summary>
        </member>
        <member name="T:ExempleMVVM.Modeles.Utilisateur">
            <summary>
            Utilisateur du système. Soit utilisateur local ou utilisateurs connectés utilisant cette application.
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Utilisateur.ip">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Utilisateur.IP"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modeles.Utilisateur.nom">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.Modeles.Utilisateur.Nom"/>
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Utilisateur.IP">
            <summary>
            Obtient ou définit l'adresse IP permettant d'envoyer un message à cet utilisateur.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Modeles.Utilisateur.Nom">
            <summary>
            Obtient ou définit le nom d'utilisateur
            </summary>
        </member>
        <member name="T:ExempleMVVM.Modules.ProtocoleSJ">
            <summary>
            Protocole utilisant UDP 50000 permettant de clavarder avec plusieurs utilisateurs sans avoir
            un serveur centralisé. De plus, on peut initialiser une conversation crypter en AES128
            utilisant le TCP (port aléatoire).
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modules.ProtocoleSJ.conversationGlobale">
            <summary>
            Représente le chat global
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modules.ProtocoleSJ.profilApplication">
            <summary>
            Profil utilisé par l'application
            </summary>
        </member>
        <member name="F:ExempleMVVM.Modules.ProtocoleSJ.port">
            <summary>
            Port utilisé pour le chat global
            </summary>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.Connexion(ExempleMVVM.Modeles.Profil)">
            <summary>
            Permet de vérifier si le nom d'utilisateur d'un profil est déjà utilisé sur le réseau et
            de démarre l'écoute sur le port 50000 UDP pour répondre au demande des autres
            utilisateurs. Durant le processus de connexion, profil.ConnexionEnCours est égal à vrai.
            Si le nom d'utilisateur est utilisé, on ferme l'écoute sur le port 50000 UDP. Sinon,
            profil.Connecte est égal à vrai.
            </summary>
            <param name="profil">Profil utilisé dans l'application pour avoir l'état de l'application</param>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.Deconnexion">
            <summary>
            Méthode permettant de fermer toutes les connexions en cours (UDP et TCP)
            </summary>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.DemarrerConversationPrivee(ExempleMVVM.Modeles.Conversation)">
            <summary>
            Permet d'ouvrir un port TCP et d'envoyer par UDP une demande de connexion en privée à l'utilisateur distant
            </summary>
            <param name="nouvelleConversation">Conversation privée contenant l'utilisateur distant</param>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.EnvoyerMessage(ExempleMVVM.Modeles.Conversation,System.String)">
            <summary>
            Méthode permettant d'envoyer un message sur la conversation en cours
            </summary>
            <param name="conversationEnCours">
            Conversation présentement sélectionnée pour envoyer le message
            </param>
            <param name="messageAEnvoyer">Message à envoyer à tous les utilisateurs</param>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.RafraichirListeUtilisateursConnectes">
            <summary>
            Méthode permettant d'envoyer un message en "broadcast" pour sonder tous les utilisateurs
            utilisant l'application sur le réseau. Par la suite, on peut rafraîchir la liste profilUtilisateursConnectes.
            </summary>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.TerminerConversationPrivee(ExempleMVVM.Modeles.Conversation)">
            <summary>
            Permet de fermer correctement une conversation privée
            </summary>
            <param name="conversation">Conversation à fermer</param>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.Recevoir(ExempleMVVM.Modeles.Conversation)">
            <summary>
            Permet de recevoir l'adresse IP ainsi que le Nom de l'utilisateur.
            </summary>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.Envoyer(ExempleMVVM.Modeles.Conversation,System.String)">
            <summary>
            Envois un message en UDP ou TCP selon la conversation et l'encrypte
            si nécessaire
            </summary>
            <param name="ipDestinataire"></param>
            <param name="conversation">Conversation à laquelle envoyer le message</param>
            <param name="message">Message à envoyer</param>
        </member>
        <member name="M:ExempleMVVM.Modules.ProtocoleSJ.EnvoyerDiscovery">
            <summary>
            Envois un message de discovery en broadcast
            </summary>
        </member>
        <member name="T:ExempleMVVM.VueModeles.RelayCommand`1">
            <summary>
            Permet de créer une commande de type ICommand en ne spécifiant que les fonctions "Execute" et
            "CanExecute". On peut envoyer un paramètre à la commande.
            </summary>
            <typeparam name="T">Type du paramètre de la commande.</typeparam>
        </member>
        <member name="F:ExempleMVVM.VueModeles.RelayCommand`1.canExecute">
            <summary>
            Contient la fonction permettant de savoir si on peut exécuter la commande ou non
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.RelayCommand`1.execute">
            <summary>
            Contient la méthode permettant d'exécuter la commande
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.VueModeles.RelayCommand`1"/>.
            </summary>
            <param name="execute">
            Délègue à execute quand la méthode Execute est appelée sur la commande. Peut être null
            pour spécifier seulement la méthode CanExecute.
            </param>
            <remarks><seealso cref="M:ExempleMVVM.VueModeles.RelayCommand`1.CanExecute(System.Object)"/> va toujours être vrai.</remarks>
        </member>
        <member name="M:ExempleMVVM.VueModeles.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.VueModeles.RelayCommand`1"/>.
            </summary>
            <param name="execute">La logique d'exécution.</param>
            <param name="canExecute">La logique du statut de l'exécution</param>
        </member>
        <member name="E:ExempleMVVM.VueModeles.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, this object
            can be set to null.
            </param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:ExempleMVVM.VueModeles.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, this object
            can be set to <see langword="null"/>.
            </param>
        </member>
        <member name="T:ExempleMVVM.VueModeles.ViewModelBase">
            <summary>
            Classe mère des vues-modèles du système.
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.ViewModelBase.ValidationErrors">
            <summary>
            Dictionnaire contenant les erreurs de validation. La clé est égal au nom de la propriété
            contenant des erreurs en string. La valeur est égal à une liste de string des erreurs.
            </summary>
        </member>
        <member name="E:ExempleMVVM.VueModeles.ViewModelBase.ErrorsChanged">
            <summary>
            Évènement avertissant qu'il y a des erreurs de validation pour une propriété.
            </summary>
        </member>
        <member name="E:ExempleMVVM.VueModeles.ViewModelBase.PropertyChanged">
            <summary>
            Évènement permettant d'avertir les observateurs du changement d'une propriété
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.ViewModelBase.HasErrors">
            <summary>
            Obtient une valeur indiquant si la liste ValidationErrors contient des erreurs.
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.ViewModelBase.GetErrors(System.String)">
            <summary>
            Permet d'obtenir la liste des erreurs d'une propriété.
            </summary>
            <param name="nomPropriete">Nom de la propriété en string</param>
            <returns>Liste des erreurs d'une propriété</returns>
        </member>
        <member name="M:ExempleMVVM.VueModeles.ViewModelBase.NotifyErrorsChanged(System.String)">
            <summary>
            Méthode permettant d'appeler ErrorsChanged sans avoir à spécifier ses paramètres
            </summary>
            <param name="nomPropriete">Nom de la propriété qui a des erreurs de validation</param>
        </member>
        <member name="M:ExempleMVVM.VueModeles.ViewModelBase.NotifyPropertyChanged(System.String)">
            <summary>
            Méthode permettant d'appeler PropertyChanged sans avoir à spécifier ses paramètres
            </summary>
            <param name="nomPropriete">Nom de la propriété qui a changée</param>
        </member>
        <member name="T:ExempleMVVM.VueModeles.vmChat">
            <summary>
            Vue-modèle pour la vue vueChat
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmChat.conversationEnCours">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmChat.ConversationEnCours"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmChat.envoyerMessage">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmChat.EnvoyerMessage"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmChat.fermerConversation">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmChat.FermerConversation"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmChat.messageAEnvoyer">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmChat.MessageAEnvoyer"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmChat.ouvrirConversation">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmChat.OuvrirConversation"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmChat.profil">
            <summary>
            Profil de l'utilsateur à faire suivre à travers les vues-modèles de l'application pour
            avoir l'état de l'application
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.vmChat.#ctor(ExempleMVVM.Modeles.Profil)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.VueModeles.vmChat"/>
            </summary>
            <param name="profil">
            Profil de l'utilsateur à faire suivre à travers les vues-modèles de l'application pour
            avoir l'état de l'application
            </param>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.ConversationEnCours">
            <summary>
            Obtient ou définit la conversation présentement sélectionnée, à qui les messages sont envoyés
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.EnvoyerMessage">
            <summary>
            Obtient la commande permettant d'envoyer le message se trouvant dans MessageAEnvoyer dans
            la conversation en cours.
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.FermerConversation">
            <summary>
            Obtient la commande permettant de fermer une conversation privée.
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.ListeConversations">
            <summary>
            Obtient la liste des conversations en cours incluant la conversation globale
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.ListeUtilisateursConnectes">
            <summary>
            Obtient la liste des utilisateurs connectées qui utilise cette application sur le réseau présentement
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.MessageAEnvoyer">
            <summary>
            Obtient ou définit le message a envoyé à la conversation en cours lors de l'appel de la
            commande EnvoyerMessage
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmChat.OuvrirConversation">
            <summary>
            Obtient la commande permettant d'ouvrir une conversation entre l'utilisateur local et un
            utilisateur dans la liste des utilisateurs connectés.
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.vmChat.Profil_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Permet de démarrer le processus de récupération des utilisateurs
            </summary>
            <param name="sender">Celui qui a appelé l'évènement</param>
            <param name="e">Contient le nom de la propriété qui a changée</param>
        </member>
        <member name="T:ExempleMVVM.VueModeles.vmConnexion">
            <summary>
            Vue-modèle pour la vue vueConnexion
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmConnexion.connecterUtilisateur">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmConnexion.ConnecterUtilisateur"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmConnexion.profil">
            <summary>
            Profil de l'utilsateur à faire suivre à travers les vues-modèles de l'application pour
            avoir l'état de l'application
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.vmConnexion.#ctor(ExempleMVVM.Modeles.Profil)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.VueModeles.vmConnexion"/>
            </summary>
            <param name="profil">
            profil de l'utilsateur à faire suivre à travers les vues-modèles de l'application pour
            avoir l'état de l'application
            </param>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmConnexion.ConnecterUtilisateur">
            <summary>
            Obtient la commande permettant de connecter l'utilisateur à l'application. Théoriquement,
            vous devriez mettre le code permettant de voir si une autre utilisateur possède le même
            nom d'utilisateur.
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmConnexion.NomUtilisateur">
            <summary>
            Obtient ou définit le nom de l'utilisateur local pour se connecter
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.vmConnexion.Profil_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Permet de vérifier le changement de propriété du profil. Si profil.ConnexionEnCours devient à faux et que profil.Connecte est toujours à faux, c'est qu'il y a eu
            un problème de connexion. Pour l'instant, le seul problème géré est un nom d'utilisateur déjà utilisé.
            </summary>
            <param name="sender">Envoyeur de l'évènement</param>
            <param name="e">Contient le nom de la propriété qui a changée</param>
        </member>
        <member name="T:ExempleMVVM.VueModeles.vmConnexionEnCours">
            <summary>
            Permet d'afficher l'interface de connexion en cours lorsque l'application est en attente des
            noms d'utilisateurs pour vérifier si le nom de l'utilisateur local est déjà utilisé.
            </summary>
        </member>
        <member name="T:ExempleMVVM.VueModeles.vmMainWindow">
            <summary>
            Vue-modèle pour la vue principale
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmMainWindow.currentViewModel">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmMainWindow.CurrentViewModel"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmMainWindow.fermerApplication">
            <summary>
            Variable privée de la propriété <see cref="P:ExempleMVVM.VueModeles.vmMainWindow.FermerApplication"/>
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmMainWindow.profil">
            <summary>
            Profil de l'utilsateur à faire suivre à travers les vues-modèles de l'application pour
            avoir l'état de l'application
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmMainWindow.vmChat">
            <summary>
            Contient le vue-modèle associé à l'interface de clavardage
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmMainWindow.vmConnexion">
            <summary>
            Contient le vue-modèle associé à l'interface de demande de connexion
            </summary>
        </member>
        <member name="F:ExempleMVVM.VueModeles.vmMainWindow.vmConnexionEnCours">
            <summary>
            Contient le vue-modèle associé à l'interface d'attente de connexion en cours
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.vmMainWindow.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.VueModeles.vmMainWindow"/>. Initialise les
            vues-modèles de l'application et spécifie le premier vue-modèle à afficher
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmMainWindow.CurrentViewModel">
            <summary>
            Obtient ou définit le vue-modèle présentement affiché dans la vue principale (les
            vues-modèles sont liés à leur vue dans le fichier App.xml)
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmMainWindow.FermerApplication">
            <summary>
            Obtient la commande permettant de bien fermer les connexions en cours avant de fermer l'application (UDP et TCP)
            </summary>
        </member>
        <member name="P:ExempleMVVM.VueModeles.vmMainWindow.Titre">
            <summary>
            Obtient le titre de l'application pour y mettre le nom de l'utilisateur
            </summary>
        </member>
        <member name="M:ExempleMVVM.VueModeles.vmMainWindow.Profil_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Permet de changer d'interface lorsque l'utilisateur est connecté
            </summary>
            <param name="sender">Celui qui a appelé l'évènement</param>
            <param name="e">Contient le nom de la propriété qui a changée</param>
        </member>
        <member name="T:ExempleMVVM.Vues.AutoScrollingListView">
            <summary>
            ListView ayant la possibilité de défiler automatique vers le bas lors de l'ajout de contenu
            </summary>
            <summary>
            AutoScrollingListView
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.AutoScrollingListView.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Redéfinition de la méthode appelée lorsque la liste des items change. Ici, on s'assure d'associer la méthode ItemsCollectionChanged à l'évènement CollectionChanged
            de la nouvelle liste.
            </summary>
            <param name="oldValue">Ancienne liste d'items</param>
            <param name="newValue">Nouvelle liste d'items</param>
        </member>
        <member name="M:ExempleMVVM.Vues.AutoScrollingListView.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Lorsque la liste change, on défile vers l'item le plus bas.
            </summary>
            <param name="sender">Celui qui a appelé l'évènement</param>
            <param name="e">Contient les changements effectués sur la liste</param>
        </member>
        <member name="M:ExempleMVVM.Vues.AutoScrollingListView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExempleMVVM.Vues.vueChat">
            <summary>
            Logique d'interaction pour vueChat.xaml
            </summary>
            <summary>
            vueChat
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.vueChat.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.Vues.vueChat"/>
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.vueChat.LvUtilisateursConnectesItem_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Permet de gérer l'appuie du DoubleClick sur un nom d'utilisateur pour ouvrir une
            conversation avec cet utilisateur.
            </summary>
            <param name="sender">Celui qui a appelé l'évènement</param>
            <param name="e">Contient les informations sur le clique effectué</param>
        </member>
        <member name="M:ExempleMVVM.Vues.vueChat.TxtMessageAEnvoyer_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Permet de gérer l'appuie de la touche "Enter" sur le TextBox de message à envoyer pour
            appeler la commande d'envoie de message
            </summary>
            <param name="sender">Celui qui a appelé l'évènement</param>
            <param name="e">Contient les informations sur la touche appuyée</param>
        </member>
        <member name="M:ExempleMVVM.Vues.vueChat.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExempleMVVM.Vues.vueConnexion">
            <summary>
            Logique d'interaction pour vueConnexion.xaml
            </summary>
            <summary>
            vueConnexion
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.vueConnexion.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.Vues.vueConnexion"/>
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.vueConnexion.TextBox_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Permet de gérer l'appuie de la touche "Enter" sur le textbox du nom d'utilisateur pour
            activer la commande de connexion
            </summary>
            <param name="sender">Celui qui a appelé l'évènement</param>
            <param name="e">Contient les informations sur la touche appuyée</param>
        </member>
        <member name="M:ExempleMVVM.Vues.vueConnexion.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExempleMVVM.Vues.vueConnexionEnCours">
            <summary>
            Interaction logic for vueConnexionEnCours.xaml
            </summary>
            <summary>
            vueConnexionEnCours
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.vueConnexionEnCours.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.Vues.vueConnexionEnCours"/>
            </summary>
        </member>
        <member name="M:ExempleMVVM.Vues.vueConnexionEnCours.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExempleMVVM.App">
            <summary>
            Logique d'interaction pour App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:ExempleMVVM.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ExempleMVVM.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:ExempleMVVM.MainWindow">
            <summary>
            Logique d'interaction pour MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:ExempleMVVM.MainWindow.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ExempleMVVM.MainWindow"/>.
            </summary>
        </member>
        <member name="M:ExempleMVVM.MainWindow.Window_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Gère la fermeture de l'application pour fermer correctement l'ensemble des connexions
            </summary>
            <param name="sender">Celui qui a applelé l'évènement</param>
            <param name="e">Permet d'annuler la fermeture de l'application</param>
        </member>
        <member name="M:ExempleMVVM.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExempleMVVM.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExempleMVVM.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
